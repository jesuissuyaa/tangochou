{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/kashi-lab/github/tangochou/utils/dbUtils.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { escape } from './strUtils';\nexport var getWords = function getWords() {\n  fetch('http://localhost:3001/vocab').then(function (res) {\n    return res.json();\n  }).then(function (json) {\n    //console.log(json);\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, \"hello\");\n  });\n};\nexport function addWord(_x, _x2, _x3, _x4) {\n  return _addWord.apply(this, arguments);\n}\n\nfunction _addWord() {\n  _addWord = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(tWord, vWord, textId, defs) {\n    var vRes, vData, vocab, tRes, tData, wordList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tWord = escape(tWord);\n            vWord = escape(vWord);\n            _context.next = 4;\n            return fetch('http://localhost:3001/vocab');\n\n          case 4:\n            vRes = _context.sent;\n            _context.next = 7;\n            return vRes.json();\n\n          case 7:\n            vData = _context.sent;\n            vocab = vData.map(function (item) {\n              return item.word;\n            }); // add to vocab\n\n            if (!vocab.includes(vWord)) {\n              fetch('http://localhost:3001/vocab', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: _JSON$stringify({\n                  word: vWord.toLowerCase(),\n                  definition: defs\n                })\n              }).then(getWords);\n            } // add to word list (for text)\n\n\n            _context.next = 12;\n            return fetch(\"http://localhost:3001/texts/?id=\".concat(textId));\n\n          case 12:\n            tRes = _context.sent;\n            _context.next = 15;\n            return tRes.json();\n\n          case 15:\n            tData = _context.sent;\n            tData = tData[0];\n            wordList = tData.wordlist;\n            wordList.push(tWord);\n            console.log(wordList);\n            _context.next = 22;\n            return fetch(\"http://localhost:3001/texts/\".concat(textId), {\n              method: 'PUT',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: _JSON$stringify({\n                text: tData.text,\n                desc: tData.desc,\n                title: tData.title,\n                wordlist: wordList\n              })\n            });\n\n          case 22:\n            tRes = _context.sent;\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addWord.apply(this, arguments);\n}\n\nexport function getTextTitles() {\n  return _getTextTitles.apply(this, arguments);\n}\n\nfunction _getTextTitles() {\n  _getTextTitles = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var res, data, elements;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('http://localhost:3001/texts');\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context2.sent;\n            elements = [];\n            data.map(function (item) {\n              return elements.push(__jsx(\"li\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 63\n                },\n                __self: this\n              }, item.title));\n            });\n            return _context2.abrupt(\"return\", __jsx(React.Fragment, null, elements));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getTextTitles.apply(this, arguments);\n}\n\nexport function deleteWord(_x5, _x6, _x7) {\n  return _deleteWord.apply(this, arguments);\n}\n\nfunction _deleteWord() {\n  _deleteWord = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(tWord, vWord, textId) {\n    var vRes, vData, vId, tRes, tData, wordList, i;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            tWord = escape(tWord);\n            vWord = escape(vWord); // remove from vocab\n\n            _context3.next = 4;\n            return fetch(\"http://localhost:3001/vocab?word=\".concat(vWord));\n\n          case 4:\n            vRes = _context3.sent;\n            _context3.next = 7;\n            return vRes.json();\n\n          case 7:\n            vData = _context3.sent;\n\n            if (vData.length) {\n              vId = vData[0].id;\n              fetch(\"http://localhost:3001/vocab/\".concat(vId), {\n                method: 'DELETE'\n              }).then(getWords)[\"catch\"](function (e) {\n                console.log(e);\n              });\n            } // delete from to word list (for text)\n\n\n            _context3.next = 11;\n            return fetch(\"http://localhost:3001/texts/?id=\".concat(textId));\n\n          case 11:\n            tRes = _context3.sent;\n            _context3.next = 14;\n            return tRes.json();\n\n          case 14:\n            tData = _context3.sent;\n            tData = tData[0];\n            wordList = tData.wordlist;\n            i = wordList.indexOf(tWord);\n            console.log(wordList);\n            if (i > -1) wordList.splice(i, 1);\n            console.log(wordList);\n            _context3.next = 23;\n            return fetch(\"http://localhost:3001/texts/\".concat(textId), {\n              method: 'PUT',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: _JSON$stringify({\n                text: tData.text,\n                desc: tData.desc,\n                title: tData.title,\n                wordlist: wordList\n              })\n            });\n\n          case 23:\n            tRes = _context3.sent;\n\n          case 24:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _deleteWord.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/kashi-lab/github/tangochou/utils/dbUtils.tsx"],"names":["React","escape","getWords","fetch","then","res","json","addWord","tWord","vWord","textId","defs","vRes","vData","vocab","map","item","word","includes","method","headers","Accept","body","toLowerCase","definition","tRes","tData","wordList","wordlist","push","console","log","text","desc","title","getTextTitles","data","elements","deleteWord","length","vId","id","e","i","indexOf","splice"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { escape } from './strUtils';\n\nexport const getWords = () => {\n  fetch('http://localhost:3001/vocab')\n    .then(res => res.json())\n    .then(json => {\n      //console.log(json);\n      return <div>hello</div>;\n    });\n};\nexport async function addWord(\n  tWord: string,\n  vWord: string,\n  textId: number,\n  defs: string[],\n) {\n  tWord = escape(tWord);\n  vWord = escape(vWord);\n  const vRes = await fetch('http://localhost:3001/vocab');\n  const vData = await vRes.json();\n  const vocab = vData.map(item => item.word);\n  // add to vocab\n  if (!vocab.includes(vWord)) {\n    fetch('http://localhost:3001/vocab', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        word: vWord.toLowerCase(),\n        definition: defs,\n      }),\n    }).then(getWords);\n  }\n  // add to word list (for text)\n  let tRes = await fetch(`http://localhost:3001/texts/?id=${textId}`);\n  let tData = await tRes.json();\n  tData = tData[0];\n  const wordList = tData.wordlist;\n  wordList.push(tWord);\n  console.log(wordList);\n  tRes = await fetch(`http://localhost:3001/texts/${textId}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      text: tData.text,\n      desc: tData.desc,\n      title: tData.title,\n      wordlist: wordList,\n    }),\n  });\n}\n\nexport async function getTextTitles() {\n  const res = await fetch('http://localhost:3001/texts');\n  const data = await res.json();\n  const elements = [];\n  data.map(item => elements.push(<li>{item.title}</li>));\n  return <>{elements}</>;\n}\n\nexport async function deleteWord(tWord: string, vWord: string, textId: number) {\n  tWord = escape(tWord);\n  vWord = escape(vWord);\n  // remove from vocab\n  const vRes = await fetch(`http://localhost:3001/vocab?word=${vWord}`);\n  const vData = await vRes.json();\n  if (vData.length) {\n    const vId = vData[0].id;\n    fetch(`http://localhost:3001/vocab/${vId}`, {\n      method: 'DELETE',\n    })\n      .then(getWords)\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  // delete from to word list (for text)\n  let tRes = await fetch(`http://localhost:3001/texts/?id=${textId}`);\n  let tData = await tRes.json();\n  tData = tData[0];\n  const wordList = tData.wordlist;\n  const i = wordList.indexOf(tWord);\n  console.log(wordList);\n  if (i > -1) wordList.splice(i, 1);\n  console.log(wordList);\n  tRes = await fetch(`http://localhost:3001/texts/${textId}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      text: tData.text,\n      desc: tData.desc,\n      title: tData.title,\n      wordlist: wordList,\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}