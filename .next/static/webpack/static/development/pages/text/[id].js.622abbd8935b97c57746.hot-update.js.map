{"version":3,"file":"static/webpack/static/development/pages/text/[id].js.622abbd8935b97c57746.hot-update.js","sources":["webpack:///./pages/text/.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from '../../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport InputText from '../../components/InputText';\nimport Button from '../../components/Button';\nimport { addWord, deleteWord } from '../../utils/dbUtils';\nimport { unescape, strip } from '../../utils/strUtils';\n\nimport scss from '../../node_modules/loaders.css/src/animations/pacman.scss';\nconst Loader = require('react-loaders').Loader;\n\ninterface Props {\n  id: number;\n  desc: string;\n  text: string;\n  title: string;\n  wordlist: string[];\n}\n\ninterface State {\n  wordInText: string;\n  wordInVocab: string;\n  defs: string[];\n}\n\nconst initialState = {\n  wordInText: '',\n  wordInVocab: '',\n  defs: [],\n};\n// interface State {\n//   sWordList: string[];\n// }\n// const initialState = {\n//   sWordList: [],\n// };\n\nconst linkStyle: React.CSSProperties = {\n  color: 'white',\n  fontSize: '0.5rem',\n  fontWeight: 'bold',\n  textDecoration: 'none',\n};\n\n// span clicked -> show definition\n\nclass Text extends React.Component<Props, State> {\n  state: State = initialState;\n\n  static async getInitialProps(context) {\n    const { id } = context.query;\n    const res = await fetch(`http://localhost:3001/texts?id=${id}`);\n    let data = await res.json();\n    data = data[0];\n\n    return {\n      id: data.id,\n      desc: data.desc,\n      text: data.text,\n      title: data.title,\n      wordlist: data.wordlist,\n    };\n  }\n\n  cleanString = (str: string) => {\n    // remove commas and periods\n    str = strip(str);\n    // split string if concatenated\n    if (str.includes('’')) {\n      str = str.split('’')[1];\n    } else if (this.state.wordInVocab.includes(\"'\")) {\n      str = str.split(\"'\")[1];\n    }\n    // lowercase\n    console.log(str);\n    return str.toLowerCase();\n  };\n  handleWordClick = async (event: React.MouseEvent) => {\n    // show loading\n    const loader = <img src=\"/static/loader.gif\" style={{ width: '3rem' }} />;\n    const container = document.getElementsByClassName('def')[0];\n    ReactDOM.render(loader, container);\n\n    // clean string\n    this.state.wordInText = (event.target as HTMLSpanElement).innerHTML;\n    this.state.wordInVocab = this.cleanString(this.state.wordInText);\n    // show link to Linguee\n    const url = `https://www.linguee.fr/francais-anglais/search?source=auto&query=${this.state.wordInVocab}`;\n    const link = (\n      <a href={url} style={linkStyle} target=\"_blank\">\n        {url}\n      </a>\n    );\n    (document.getElementsByClassName(\n      'word',\n    )[0] as HTMLDivElement).innerText = this.state.wordInVocab;\n    ReactDOM.render(link, document.getElementsByClassName('def-link')[0]);\n\n    // get definitions from Linguee\n    let response = await fetch(\n      `http://localhost:3000/api/linguee/${this.state.wordInVocab}`,\n    );\n    let data = await response.json();\n    if (!data.length) {\n      // linguee timed out\n      // get definitions from collitions\n      response = await fetch(\n        `http://localhost:3000/api/collins/${this.state.wordInVocab}`,\n      );\n      data = response.json();\n    }\n    // display definitions\n    const spanStyle: React.CSSProperties = { marginRight: '1rem' };\n\n    let elements;\n    if (data.length) {\n      // copy to state\n      this.state.defs = data;\n      elements = data.map((item, index) => (\n        <span key={index} style={spanStyle}>\n          {item}\n        </span>\n      ));\n    } else {\n      elements = <i>no definition found :(</i>;\n    }\n    console.log(this.state.defs);\n\n    ReactDOM.render(elements, container);\n  };\n\n  textWithTags = (text: string, wordlist: string[]) => (\n    <>\n      {text.split(' ').map((word, index) => (\n        <>\n          <span\n            key={index}\n            className={wordlist.includes(word) ? 'highlight' : ''}\n            onClick={this.handleWordClick}\n          >\n            {unescape(word)}\n          </span>\n          &nbsp;\n        </>\n      ))}\n      <style jsx>{`\n        .highlight {\n          background-color: #a17da1;\n          color: white;\n          padding: 0 0.3rem;\n        }\n      `}</style>\n    </>\n  );\n\n  render() {\n    return (\n      <Layout>\n        <div className=\"word-container\">\n          <div className=\"word\">\n            <i>click on a word :)</i>\n          </div>\n          <div className=\"def\"></div>\n          {/* <InputText /> */}\n          <div className=\"button-container\">\n            <Button\n              clickhandler={e => {\n                addWord(\n                  this.state.wordInText,\n                  this.state.wordInVocab,\n                  this.props.id,\n                  this.state.defs,\n                ).then(() => location.reload());\n              }}\n            >\n              add to vocab\n            </Button>\n            <Button\n              clickhandler={e => {\n                deleteWord(\n                  (document.getElementsByClassName('word')[0] as HTMLDivElement)\n                    .innerText,\n                  this.props.id,\n                ).then(() => location.reload());\n              }}\n            >\n              remove from vocab\n            </Button>\n          </div>\n          <div className=\"def-link\"></div>\n        </div>\n        <hr></hr>\n        <h3>{this.props.title}</h3>\n        <div className=\"text-container\">\n          {this.textWithTags(this.props.text, this.props.wordlist)}\n        </div>\n        <style jsx>{`\n          .button-container {\n            display: flex;\n            justify-content: space-around;\n            margin: 0.5rem 0;\n            width: 100%;\n          }\n          .def {\n            display: flex;\n            flex-flow: row wrap;\n            margin: 0.5rem 0;\n          }\n          .def-link {\n            line-height: 1;\n          }\n          .text-container {\n            display: flex;\n            flex-flow: row wrap;\n            overflow-wrap: break-word;\n          }\n          .word {\n            border-bottom: 1px dotted #fff;\n          }\n          .word-container {\n            background-color: #a17da1;\n            color: white;\n            display: flex;\n            flex-flow: column;\n            padding: 1rem;\n          }\n          .word {\n            flex-basis: 30%;\n          }\n        `}</style>\n      </Layout>\n    );\n  }\n}\n\nexport default Text;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAeA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;;;;;;;;;;;;;;;;;;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AApBA;AAAA;AACA;AADA;AAsBA;AAtBA;AAAA;AACA;AADA;AAyBA;AACA;AA1BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AA6BA;AAGA;AACA;AAjCA;AAkCA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AApDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAqDA;AAAA;AAEA;AAGA;AAEA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAAA;AAAA;AADA;AACA;;;;;;AAuBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAIA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApCA;AAAA;AAAA;AA2EA;;;;;;AAvLA;;;;;;AACA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;;;;;;;;;;;;;;AAVA;AACA;AA4LA;;;;A","sourceRoot":""}