{"version":3,"file":"static/webpack/static/development/pages/vocab.js.885246f891d62af4b434.hot-update.js","sources":["webpack:///./pages/vocab.tsx"],"sourcesContent":["import * as React from 'react';\nimport Layout from '../components/Layout';\nimport { unescape } from '../utils/strUtils';\n// import fetch from 'isomorphic-unfetch';\ninterface Props {\n  key: number;\n}\n\ninterface WordState {\n  words: { id: number; word: string; definition: string[] }[];\n}\n\nconst initWordState = {\n  words: [\n    {\n      id: 1,\n      word: 'falloir',\n      definition: ['to need', 'have to'],\n    },\n    {\n      id: 2,\n      word: 'valoir',\n      definition: ['be worth'],\n    },\n    {\n      id: 3,\n      word: 'faire',\n      definition: ['to do', 'to make'],\n    },\n  ],\n};\n\nconst createWordList = (\n  dict: {\n    id: number;\n    word: string;\n    definition: string[];\n  }[],\n) => {\n  const res = [];\n\n  let l = 65;\n  let _w = 0;\n  while (l < 65 + 26 /* && _w < dict.length*/) {\n    const letter = String.fromCharCode(l);\n    let w = _w;\n    // insert heading letter\n    res.push(<Heading key={l}>{letter}</Heading>);\n\n    const list = [];\n    let key = 1;\n    while (w < dict.length && dict[w].word[0].toUpperCase() == letter) {\n      list.push(\n        <li key={key}>\n          {unescape(dict[w].word)}\n          <div key={key++} style={{ marginLeft: '1rem', fontSize: '0.8rem' }}>\n            {dict[w++].definition.join(', ')}\n          </div>\n        </li>,\n      );\n    }\n    res.push(<ul>{list}</ul>);\n    _w = w;\n    l++;\n  }\n  _w = 0;\n  return res;\n};\n\nconst Heading: React.FC<Props> = props => (\n  <p>\n    {props.children}\n    <style jsx>{`\n      p {\n        font-size: 1.5rem;\n        font-weight: bold;\n        margin: 0;\n      }\n    `}</style>\n  </p>\n);\n\nclass Vocab extends React.PureComponent<{}, WordState> {\n  state: WordState = initWordState;\n\n  fetchWords() {\n    fetch('http://localhost:3001/vocab?_sort=word&order=asc')\n      .then(res => res.json())\n      .then(json => {\n        this.setState({ words: json });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchWords(); // update state\n  }\n\n  render() {\n    return (\n      <Layout>\n        <div className=\"container\">{createWordList(this.state.words)}</div>\n        {/* TODO move createWordList to componentdidmoutn */}\n        {/* <div>{createWordList(this.state.words.map(item => item.word))}</div> */}\n        {/* {[...Array(26)].map((_, i) => (\n          <Heading key={i}>{String.fromCharCode(65 + i)}</Heading>\n        ))} */}\n      </Layout>\n    );\n  }\n}\n\nexport default Vocab;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAZA;AACA;AAmBA;AAOA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAYA;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA1BA;AACA;AA4BA;;;;A","sourceRoot":""}